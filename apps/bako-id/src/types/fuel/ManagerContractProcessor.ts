/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog, addFuelProcessor, getFuelProcessor, FuelBaseProcessorTemplate } from '@sentio/sdk/fuel'
import {Option,Enum} from './common.js'
import {ManagerErrorInput,ManagerErrorOutput,IdentityInput,IdentityOutput,ManagerLogEventInput,ManagerLogEventOutput,RecordDataInput,RecordDataOutput,AddressInput,AddressOutput,ContractIdInput,ContractIdOutput, ManagerContract} from './ManagerContract.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes } from 'fuels';


namespace ManagerContractNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeManagerError(): Array<ManagerErrorOutput> {
      return this.logs?.filter(l =>["49857487806267683"].includes(l.logId) ).map(l => l.data) as Array<ManagerErrorOutput>
    }

    getLogsOfTypeManagerLogEvent(): Array<ManagerLogEventOutput> {
      return this.logs?.filter(l =>["11146364172429795543"].includes(l.logId) ).map(l => l.data) as Array<ManagerLogEventOutput>
    }
  }


}

type LogIdFilter<T> = T | T[]
const LogManagerErrorId = "49857487806267683"
const LogManagerLogEventId = "11146364172429795543"

export class ManagerContractProcessor extends FuelAbstractProcessor<ManagerContract> {
  static bind(options: Omit<FuelProcessorConfig, 'abi'>) {
    if (!options.name) {
      options.name = "ManagerContract"
    }
    let processor = getFuelProcessor(options) as ManagerContractProcessor
    if (!processor) {
      processor = new ManagerContractProcessor(ManagerContract.abi, {
        name: 'ManagerContract',
        ...options,
      })
      addFuelProcessor(options, processor)
    }
    return processor
  }

   

  
  onLogManagerError(handler: (log: FuelLog<ManagerErrorOutput>, ctx: FuelContractContext<ManagerContract>) => void | Promise<void>) {
    return super.onLog<ManagerErrorOutput>([LogManagerErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogManagerLogEvent(handler: (log: FuelLog<ManagerLogEventOutput>, ctx: FuelContractContext<ManagerContract>) => void | Promise<void>) {
    return super.onLog<ManagerLogEventOutput>([LogManagerLogEventId], (log, ctx) => handler(log, ctx))
  }

}

export class ManagerContractProcessorTemplate extends FuelBaseProcessorTemplate<ManagerContract> {
  bindInternal(options: Omit<FuelProcessorConfig, 'abi'>) {
    return ManagerContractProcessor.bind(options)
  }

  
  onLogManagerError(handler: (log: FuelLog<ManagerErrorOutput>, ctx: FuelContractContext<ManagerContract>) => void | Promise<void>) {
    return super.onLog<ManagerErrorOutput>([LogManagerErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogManagerLogEvent(handler: (log: FuelLog<ManagerLogEventOutput>, ctx: FuelContractContext<ManagerContract>) => void | Promise<void>) {
    return super.onLog<ManagerLogEventOutput>([LogManagerLogEventId], (log, ctx) => handler(log, ctx))
  }
}

