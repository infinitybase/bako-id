/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */
    
import { FuelAbstractProcessor, FuelContractContext, FuelProcessorConfig, TypedCall, FuelFetchConfig, FuelCall, FuelLog, addFuelProcessor, getFuelProcessor, FuelBaseProcessorTemplate } from '@sentio/sdk/fuel'
import {Enum} from './common.js'
import {RegistryContractErrorInput,RegistryContractErrorOutput,NameValidationErrorInput,NameValidationErrorOutput,MetadataInput,MetadataOutput,IdentityInput,IdentityOutput,NewNameEventInput,NewNameEventOutput,AddressInput,AddressOutput,AssetIdInput,AssetIdOutput,ContractIdInput,ContractIdOutput, RegisterContract} from './RegisterContract.js'

import type { BigNumberish, BN } from 'fuels';
import type { BytesLike, Bytes } from 'fuels';


namespace RegisterContractNS {
  export abstract class CallWithLogs<T extends Array<any>, R> extends TypedCall<T, R> {

    getLogsOfTypeRegistryContractError(): Array<RegistryContractErrorOutput> {
      return this.logs?.filter(l =>["9273072382193316023"].includes(l.logId) ).map(l => l.data) as Array<RegistryContractErrorOutput>
    }

    getLogsOfTypeNameValidationError(): Array<NameValidationErrorOutput> {
      return this.logs?.filter(l =>["4419591021028812583"].includes(l.logId) ).map(l => l.data) as Array<NameValidationErrorOutput>
    }

    getLogsOfTypeNewNameEvent(): Array<NewNameEventOutput> {
      return this.logs?.filter(l =>["16001917540453911612"].includes(l.logId) ).map(l => l.data) as Array<NewNameEventOutput>
    }
  }


}

type LogIdFilter<T> = T | T[]
const LogRegistryContractErrorId = "9273072382193316023"
const LogNameValidationErrorId = "4419591021028812583"
const LogNewNameEventId = "16001917540453911612"

export class RegisterContractProcessor extends FuelAbstractProcessor<RegisterContract> {
  static bind(options: Omit<FuelProcessorConfig, 'abi'>) {
    if (!options.name) {
      options.name = "RegisterContract"
    }
    let processor = getFuelProcessor(options) as RegisterContractProcessor
    if (!processor) {
      processor = new RegisterContractProcessor(RegisterContract.abi, {
        name: 'RegisterContract',
        ...options,
      })
      addFuelProcessor(options, processor)
    }
    return processor
  }

   

  
  onLogRegistryContractError(handler: (log: FuelLog<RegistryContractErrorOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<RegistryContractErrorOutput>([LogRegistryContractErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogNameValidationError(handler: (log: FuelLog<NameValidationErrorOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<NameValidationErrorOutput>([LogNameValidationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogNewNameEvent(handler: (log: FuelLog<NewNameEventOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<NewNameEventOutput>([LogNewNameEventId], (log, ctx) => handler(log, ctx))
  }

}

export class RegisterContractProcessorTemplate extends FuelBaseProcessorTemplate<RegisterContract> {
  bindInternal(options: Omit<FuelProcessorConfig, 'abi'>) {
    return RegisterContractProcessor.bind(options)
  }

  
  onLogRegistryContractError(handler: (log: FuelLog<RegistryContractErrorOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<RegistryContractErrorOutput>([LogRegistryContractErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogNameValidationError(handler: (log: FuelLog<NameValidationErrorOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<NameValidationErrorOutput>([LogNameValidationErrorId], (log, ctx) => handler(log, ctx))
  }

  onLogNewNameEvent(handler: (log: FuelLog<NewNameEventOutput>, ctx: FuelContractContext<RegisterContract>) => void | Promise<void>) {
    return super.onLog<NewNameEventOutput>([LogNewNameEventId], (log, ctx) => handler(log, ctx))
  }
}

