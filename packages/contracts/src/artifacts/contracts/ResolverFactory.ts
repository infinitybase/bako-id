/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.63.6
  Fuel-Core version: 0.35.0
*/

import { Contract, ContractFactory, decompressBytecode } from "fuels";
import type { Provider, Account, DeployContractOptions, DeployContractResult } from "fuels";

import { Resolver } from "./Resolver";

const bytecode = decompressBytecode("H4sIAAAAAAAAA6VafWxb13W/pCiLTdz4OZJi+jmOXxJJYZsmY1A5lbE1eQTFUCwt6CmyJhnqw6NgCZHrVGYV2XWbtObWofWwD6jD1gldgCnJ0BjYhj3Kki1b/uAfA+ai3SBs2Oqiw2BvyOqgIcA/5lVGgLq/c+99H+J7dItUgHAvH98999zz+TvnUq2n2DxjUcb/kiXzXjWi3LtHz5j6gcG+zXZUzUx9r5JmVbW/yOYGooaS7Sir7ytM2/w0G//wZtT48GZsnrW8ruY2mFXbeU2+N9DkvS/J924YuavVkO/n1cIGM4ZWx+k79T2NqbdSoXvNHWRKstZRBZ0NPs+tYL625MxDaP8hrTOGls9aNWXUqmm/a+RsZW4A72d7y0bhqqCZB83C8qJVYyNzOnsQ4yEjc+46/y7dhe+uzLjv5a6c4vNsDPuB1/cCe76hZjbYST36p5DjYyRH8MuMwkof6H4L9GMYzxiZlbKP/hkf/cVfQX9K0I/8AvT3+ejfAN2/Av1WjG+C/m2P/pqQF6e/dvNX0D8o6c+Cvuajvwm6fy35XzIyq3Ef/bpH/6KQaXP6vYI+i4LW68/rjGGfx8U+VzaNwgXdsYOt6+K7hC4rsDWWTA52lI3cuSKfky5z51NB/bee52sKleScwbRkvpMZuWsGn2e7Mb887s4LF8422fcApzFROYO9tORh7Fs4dwYy+BL4j2Ocg6yTc/1cFrqRWxl3eSpcSgi5xKpGZk0T8mAN9GNlkgd4HPDevSp0RLLNrOFcgTV/T2vMPGQ3yCJmmkWNkcu35w5h3+FO8HBFsWqPv23VnnvHqkX+xshcuK2+r3NdqLcaacW5vZpZ0MpLWkOXYKs7c6AxgPV58FBU30+F8f49znuuckr4VKxsZK4t8XkacsI5IIOkcy46/9b10bfE2dd1x35C3lkUOjxHfgEdTlUh8y/Dn08ZmfU1yD0l5H7+OskpaG/bViSPZ308Lng8Xha8Yx6Uc/QrXDa5+hNKVqmahfojz+ixl1V9g6n9N8lm+pw91VuNfLdZfG2aIfZFfgxZcP4a6O+ns7XnFXZygO1qzyr6yX4WeR6xGLZ92/pA+ZpRWL0h9mikH3u30QasrBaxsimMrAUx5SzsE/LqoNjeamSW16wP2Bh/3k/PYzp4WuBzkl9mbSDEztpd26A9hlnUHMX8sLQTa7Vvroj1Zg8zC5XV9rxG53jazNjvtqeZTj4O395FPo540WekWdwoXKZcUIZt/p5VS/++kbugqbeduB/Q3U9IPibkYw4qETOrwM7Xz8DOE8nhVvC8vgQbnQetE6B5EjZgCzuHvAK0Wq822jnkohi59dtWbfhrVm3y69DTafhKXL3t6LRRHtsuhPiKgb0/Bz4KWH8QciyF+0rLT6Qd3vDs8Krt2eEVihtN7DDyI+EnV2SMCPOTeAfJqjsNWWXqT1I8hd12kd1i3Sbyq4zHgdz6IeVfc1Bj5rAWMfNa1Bg7r6jvIzButYUj6hjFQbs893mKg6NVY+xais9HpzG/3OfOJy6cofXqezCOrfL7X0ljyaNxDvJjX4CtfgzjMcTSBL6DHOi7dcWjuU57KcnDrYiJ61jz3BdgP8cg91cRPyg/k60jh5yH/MTepD/1P/H/Y5wtU38E+vl/6Ornxo+u2Q1nOy10Y1ehg5TUjcHnIkasufPcBemPAVu9LGnUffote/pdI9rN9MtjBfTU11y/bW/69Nst9dvj0y/yV6h+vxHU72o9qN+WnwndLI/79OvJf+wy6cXR70wT/c5KGqd8+tWh1xnodzvGo9Bv3NPvpbMezUvXPf1eApZ5bgL6/Tz0ayKHEL5w9Gt8BP22Sd3oPv0SDnT0S7nd0W+zPNIvaZR8+iV6jn5dXw7ql/1U6lfmwlD9dvn0+5TUb1LmnU8oea1qWvVPKmapak7Un1YOF6vGEPQ+sgpdULxBsN9qU33qEPYcsTXESy05vF8HDr7B54NZ3RhbJluD7PtBZ3mT46DBVoYcccRIpwReSgMvZS4qyBEDyXQvcuwq/DpMNpEDMraNc5rAfpCN0FkaOsusheXWH/A1Q5U1Z2/ofcbdN3fpjMBm+1n4ntGzYs9zsBXtdcj+UYxvAKe6MRI0BEbNdkHeoXx/CHuUOXBex9m/Y2RZkuO87BRs4SJhgwGu68Ia+AjDh5F/lRiT8La00YtVzGldSE0S+TfB90UpK8LP5xFTiDblrQD9AfH+ctyz3SvXPdu9VpLfkazLyL1ZM2e/RJ/35GNUY8T35HvLPQOgPVCCvK+VDuR7qR6I78n26koWuX9oNSF0MAowK2QOnFz67WxsQUXu7sb/XzDW8p24qBHVzBJTczc5tlHv4P+uwhbx3V/inc9t8nf3Bd4lnAJ8ABxBe8SVwf3MSsNu7yBmeev3yfUvOuu/zVhK0FhgaqHM1CHgrhHUcIdYnDAAcGAL5qgLYdPC1pXkyKoOrMKUbL9uwZ8Qe5RkYYXv9WdE727K2e9FuV+bbz/F4Zn7c43wue2eFesVH79tIfwaHr+gwWtW2MHP7MaYkJL+SWdRCLcTdml45yl1BPgQsmofhKwMxk4eZI8aQ3YKMlTIZ8j3G9Z8UtLV70P3cW6zjrwgx5B34mR3nxjuNdQ7Op3bUO9qH0VukfvI7TeVu2tnWF/0y13amZaswZaHIAuaD626zx37MzKQAflhZoV8lscu9Y5C+xV95w2xyyj4w35j2G8ENkmxz40VlUR4rGD/xPsY5Ks1yjUVqpX4mmCcYN+XMbWPv59bAV0bdVyzOMFekPlJ8+LEsi/HLRfld06ciCNOfKx5nFguHsjHNoDht0FGi4iN7TzG9aPGRO2A/R7C8xJqlIe2xJKCbbhxMMso/soY563Fuiqfo+4AH5+VtYKoe/AdrxNyy5RbSR9lHp9HY7p6x4BeIPe7eqMd3vP0Eqm7djCBeDHG7Qln66Azakq+i/S8T46t+8QY2212EE84xzzVohp6WeI9Mbbuwwg7sp1cxWurWi/4rVAs5fYD3oGrwmp89mmR/6Wt8Rq/AowtdNnwblLkRWmzPC9WyN+hN+pTVAQPebLrSumdwdhb+J6wKvFAtlfC8wU8R48GvHF9oxeRsb15wS56fADP8zzdhbpa6bBqpU5eUx8meRchb8jzruHI+56U9w6f3+l+v4OdxPDfiv9twHttrn8hBnKZ5SgOc//Sff61o5FuQwx1/TJkTVheijXJS/54s4Vv2CDvSan/x6hefgR8p1xsB78Jxw9sJ+mK935q3K4JKynQA+y6noB/Rc2C3dIbib2Mz7upDm44txPHfPbLFvx8wQ5gJ4EY/wzFeHM4xczRVMQcTEVRU814+Nk+ZdX0HVbNQB8otRM00KcAXuZxo5FWtIvXtIiLyJmiph2zUV+lHgAN6oVuB72kwNwBW+3h55c5judZT78LvnOG2Q1wjRPvY8yLO3YCOK6FnmHktgQ9JOBrZLcp7JVALiefTJDNytww4NO1Yxf+nDzTIFPqASakHxNtijuEzRPkx+aQ3YoYpFAOhRzixqAe53hjkHoOtujppfuJB9HnFOedCcmPTf3E8QnXP4CT38qsaPI89/UN0NJcWy/UP0W1gaCHWCbjgKSjhcjFnzMTfp64jf80gFM+3mgf6DExK6uj1wR/EWdPhORKv02XGvfx73GCRf9IYhbe66QaVr21FY/gnT+QcVFzsI+HnVoF1qlx/Rh8nlkFpgnY6xNEowd+qB4qsc7D8PlxFsHzB+A/uvCfLDD71roWe3+LcBhqJdqzODdOe+5Hzg5gpgfoHFbWwD+KevTipHxKIb7wm2Kn076ct+Szh2d4rThUf1YZTFXNkfpvKcM6am2cb5zyaHcZPrXdyBtJ/jm/n+MKXq/kD1GOC+0jQAYvUB/BsTPkGZE34ItYj5p5Kx45wdjfinsdWX8OdgMbVEhPWLOK+rNCcgQ/JEfab2s/Auv/hdZTTxE00G/Xd0Lv7Rgfhg4Whd6ppkVupDlq2nC+I29s9QnIypPlaSHLHT5bRb/5OGSZga3mgB+OlZj6SpGZRwxmWkZEnaC+L3rJbq+eMFkw52PfeR4bpT6Bv2b4nHJ0xt4M+kDkpWBPH/mb9zqpp19Bn1L7LOLRC4jJLyK3Iyc16+mzbwT7lJU15PfPgAbdQx0Q+CPYpwQfgxJHynsyzjv1R2SfY3kG5xd3YCE9/ROs5WV5n+HeaYW8MyFqZlvUwPkV6ukjXykK6FM+lT39ittfbzjfNR/WdXh0+/g422KzXgz2/iqtfSb9vXGvj1/hve/wPn7ki14fn6G/u4y7kADN9eZ9fBt9d2UX9kDfKqyPH5mU2JByG+Fj4F+FcDPhY7qXTCFHpbw+PnzhA7aTPyc5AU/z780u5N0S4eNF9W5R2vcOJ9b4YgXqmjHY9wTsOwP7RsxALFAIZ1BdTj0AYzgl8t1wt+hvidwrepPk70P2gMif07yGdPyuMWbz3NHQe6Say0ojd6Q1xEYe21BnNfpjxJ87brq54wj4tUhfPFcL/xuyqX8EXjrJbiiXw254DZKgO2Fzwn7AHLMfBBbbjnc33NxBeZzmaV4fUt+JP0c9wusZJR2rKukO1plu5bUJyR5yju4ZPcR6DgGk753S1XHgFWAt565OSU/pwA4KrytRwwD77eA6hD6JHvhCHCvuBC57GLbUjrVU2wHHcIxJtWCC1zuESSY7oM8yyeemerck5RNx9Omvd7Zg5TC8iNhthuDFRdGjBV60YKM1fRf4AvZK7fbwImJfAC+y32mkhfugGGhsgIYKGntAg3oUsPemNKYDNNKw7QkbMU7fCxqPgcY+0ovwGer1BmgcCsGtuFdKAfPqkDF7uBluhTy+2Ry3Qp7BXO23x42QflRC9Fg5/ljjMTvdqQt75HWBwedUFzj2mLG3U12rZGN6Z7aTxwtuY/3cxnRpY4zbWI5je9RA2aoyPMX4fLiT6lXcz4N+mF2RT/A+KuyK5lmJdRFHZB9sw9cHC4sTvjrEPecpJx+Js/XT3lSbwtfQW5mwt+FsbfC1OO/xDXeyzuGsftKQZzPobKNb/Afn0S306ugunfwN9HDnXMRdkIH6gz0o/dQ5S7HJWVBruGeRMcTDV+IcOAPVp8iJDXVkWA9v8/54tfUzZL/tsF+cbRd6czr6ciLew2YR7z8OWeEukmy3EcfG/o7He7cvD5tJ83iLGoD3MDdwNtzj91K8f5j6AIj3cTxfaEKvym2Z97oQ14gWzTOrtIdLi4/Zfqc227xfrfLr195t/jgk+m/HsO4V6ofZ/HccDXny9Jb73GEF98mYH5Z3uxZyUJFy2Taeb2VN/ix8JRq8T7YV0SdCf4x+95CFHHP2TeAb3AOkEEP0x5AnyuJuOZjXgS8vBe+W7U3xGwry44oGWl2g1Q1c0gPai83vltnToXfLGfs67Hg37BlxUdlDfizuloM0wM9/BTGbbWMd7rU0xGaWAD38RioMs7Vc8vcheDw7RvFsieIZ8uuC1FtbWP7wamMLPgJ8y3+/Aszq08GnoAOaN+oA9/n8dyuil1RArKG8y+9AoP8m9/rAmLtDZF/3YmgFMVx7ArJ/Eufvoju3+8ie/56oQfY9kjfCCQ5vhEcd3pJCD6G86SG8UUx34jvdN/EcB972ghZ00pQ3UTv7eLNMhVkmfqdhUu1MeA3yd/GaG4eb3CeE5huyf55vXD7+Z2sNjzP9g8uHU8PjfFYeOCxPfPAYiv7+R7oXaVqj5hAPjxyffW1+7sSR+eNz/BeHt87+fOm733+7diTyz0tL/1h4+09GJv978uvvvnP031/8j3tvpSvid4nN/2YnvzhN4yvT8xbNM8dn5+cmj8xrk6/OTU9OfUU7Ont0/ujkq0e/Oj1F701OTfGN6f256deOv3pymn8+/uVZPqHnzpz+7sm/H/I/Fv3j7h88/82Xnv2ueMrY4OTs5CvTc1q+X5s9Pq+9Nj3/rI+7JLpY9PdUWY59YuxZkGNKjE/OiPHxpBg1W4z75PePbYjx0RtylJ/3JuTnqhzXxKj8UIwPvSnHPxfjjoO/BGRn+lDwKQAA");

export class ResolverFactory extends ContractFactory {

  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Resolver.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: Resolver.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy (
    wallet: Account,
    options: DeployContractOptions = {}
  ): Promise<DeployContractResult<Resolver>> {
    const factory = new ResolverFactory(wallet);
    return factory.deploy(options);
  }
}
