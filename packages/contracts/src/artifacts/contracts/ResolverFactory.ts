/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.96.1
  Forc version: 0.66.2
  Fuel-Core version: 0.40.0
*/

import { Contract, ContractFactory, decompressBytecode } from 'fuels';
import type {
  Provider,
  Account,
  DeployContractOptions,
  DeployContractResult,
} from 'fuels';

import { Resolver } from './Resolver';

const bytecode = decompressBytecode(
  'H4sIAAAAAAAAA6Vab2xb13W/pCiLTd34OZJi5jmOXxJJYZsmYxA5U7A2eQTFUCwj6CmSJhnKw6MgCZHjzGYV2XWbtOHWovWwblAHrBO6AVOSoTFQDHiUJVu2/IcfBsxFt0Fo0dZB+8FuEdRBQ4Af6lZGgLq/c+99f8T36BapAOFePr577rnn7++cS7WeYguMRRn/SxbN29WIcvs2PWPqBwb7FttVNTP1fUqaVdX+IpsfiBpKtqOsvq8wbetJNvHhtajx4bXYAmt5Tc1tMqu2+7J8b6DJe5+X7101cpeqId8vqIVNZgytTdB36nsaU6+nQveaf54pyVpHFXQ2+Ty3ivn6sjMPof33tM4YWjll1ZQxq6b9tZGzlfkBvJ/tLRuFS4JmHjQLK0tWjY3M6+zjGEeNzOkr/Lt0F767OOe+l7t4gs+zMewHXt8L7Pm6mtlkx/XoP0GOD5AcwS8zCqt9oPsN0I9hPGlkVss++id99Jf+CP0ZQT/ye9Df76N/FXT/DfRbMf476N/w6K8LeXH669f+CP3nJf0joK/56G+B7n9I/peNzFrcR7/u0T8nZNqcfq+gz6Kg9dpTOmPY50Gxz8Uto3BWd+xg+7p4u9BlBbbGksnBjrKRO13kc9Jl7kwqqP/WM3xNoZKcN5iWzHcyI3fZ4PNsN+YXJtx54eypJvse4DQmKyexl5Y8iH0Lp09CBp8H/3GM85B1cr6fy0I3cqsTLk+F8wkhl1jVyKxrQh6sgX6sTPIAjwPeu5eEjki2mXWcK7Dmv2iNmYfsBlnETLOoMXLhxvwo9h3uBA8XFav24FtW7Ym3rVrkP43M2Rvq+zrXhXq9kVb8BKeVBa28pDV0Hra6OwcaA1ifBw9F9f1UGO/f5bznKieET8XKRubyMp+nISecAzJIOuei829fH31TnH1Dd+wn5J0locPT5BfQ4UwVMv8C/PmEkdlYh9xTQu5nrpCcgva2Y1XyeMrH46LH4wXBO+ZBOUe/yGWTqz+kZJWqWajf+5gee0HVN5naf41sps/ZU73eyHfbJF+bZoh9kXchC85fA31uW+15hR0fYHvas4p+vJ9FnkIshm3fsD5QvmwU1q6KPRrpx95ptAErq0WsbAoja0FMOQX7hLw6KLa3GpmVdesDNs6f99PzmA6eFvmc5JdZHwixs3bXNmiPYRY1xzA/KO3EWuubL2K92cPMQmWtPa/ROR41M/Y77Wmmk4/Dt/eQjyNe9BlpFjcKFygXlGGbf2vV0n9n5M5q6g0n7gd09y7Jx4R8zEElYmYV2PnGSdh5IjncCp43lmGjC6B1DDSPwwZsYeeQV4BW66VGO4dcFCO3ccOqDX/Zqk19BXp6A74SV284Om2Ux461EF8xsPfnwEcB65+HHEvhvtLyM2mHVz07vGR7dniR4kYTO4z8VPjJRRkjwvwkrpCsutOQVab+MMVT2G0X2S3WbSG/yngcyK0fUv41BzVmDmsRM69FjfEzivo+AuN2W5hWxykO2uX5FykOjlWN8cspPh+bxfxCnzufPHuS1qvvwTi2y+8XksayR+M05Mdehq1+DONhxNIEvoMc6LsNxaO5QXspyYOtiIkbWPPEy7Cfw5D7K4gflJ/J1pFDzkB+Ym/Sn/pz/L+Ls2Xq90I/v4Wufmf89LLdcLY3hG7sKnSQkrox+FzEiHV3njsr/TFgq+uSRt2n37Kn33Wi3Uy/ltRvX3P9tvE4KPXbLfXb49Mv8leofr8a1O9aPajfll8L3axM+PTryX/8AunF0e9cE/2+LGmc8OlXh17noN+dGA9Bv3FPv+dPeTTPX/H0ex5Y5olJ6PdF6NdEDiF84ejX+Aj6bZO60X36JRzo6Jdyu6PfZnlElzRKPv0SPUe/ri8H9ct+JfUrc2GofjWffh+R+k3KvPNJJa9VTav+KcUsVc3J+qPKwWLVGILeR9agC4o3CPbbbapPHcKeI7aGeKklhw/owMFX+XwwqxvjK2RrkH0/6KxscRw02MqQI6aNdErgpTTwUuacghwxkEz3Iseuwa/DZBN5Wsa2CU4T2A+yETpLQ2eZ9bDc+gO+Zqiy7uwNvc+5++bOnxTY7AAL3zN6Sux5GraivQbZ34/xdeBUN0aChsCo2S7IO5TvD2GPMgcu6Dj7t40sS3Kcl52BLZwjbDDAdV1YBx9h+DDyQ4kxCW9LGz1XxZzWhdQkkR8Jvs9JWRF+PoOYQrQpbwXoD4j3V+Ke7V684tnu5ZL8jmRdRu7Nmjn7Ofq8Nx+jGiO+N99b7hkA7YES5H259HS+l+qB+N5sr65kkfuH1hJCB2MAs0LmwMmlv8rGFlXk7m78/wtjLd+OixpRzSwzNXeNYxv1Jv5vKWwJ3/0r3vncFn93f+BdwinAB8ARtEdcGTzArDTs9iZilrd+v1z/rLP+W4ylBI1FphbKTB0C7hpBDTfK4oQBgANbMEddCJsWtq4kR9Z0YBWmZPt1C/6E2KMkC6t8r38merdSzn7Pyv3afPspDs/cn2uEz233rFiv+PhtC+HX8PgFDV6zwg5+bTfGhJT0TzqLQridsEvDO4+oI8CHkFX7IGRlMHb8eXa/MWSnIEOFfIZ8v2HNpyRd/Q50H+Q268gLcgx5J05298nhXkO9qdO5DfWW9lHkFrmD3P5cubt2hvVFv9ylnWnJGmx5CLKg+dCa+9yxPyMDGZAfZlbJZ3nsUm8qtF/Rd94Qu4yCP+w3jv1GYJMU+9xYUUmExwr2P7yPQb5ao1xToVqJrwnGCfZ9GVP7+Pu5VdC1Ucc1ixPsGZmfNC9OrPhy3EpRfufEiTjixMeax4mV4tP52CYw/A7IaAmxsZ3HuH7UmKgdsN/deF5CjXL3tlhSsA03DmYZxV8Z47y1WFflc9Qd4OOzslYQdQ++43VCboVyK+mjzOPzWExXbxrQC+R+S2+0w9ueXiJ11w4mES/GuT3hbB10Rk3Jd5Ge98uxdb8YY/eZHcQTzrFAtaiGXpZ4T4yt+zHCjmwnV/HaqtYLfisUS7n9gHfgqrAanz0p8r+0NV7jV4CxhS4b3k2KvChtlufFCvk79EZ9iorgIU92XSm9PRh7E98TViUeyPZKeL6I5+jRgDeub/QiMrY3L9hFjw/geZ6nu1BXKx1WrdTJa+qDJO8i5A153jIced+W8t7l8zvgIs/vYCcx/LfifwfwXpvrX4iBXGY5isPcv3Sff+1qpNsQQ12/DFkTlpdiTfKSP95s4xs2yHtS6m8Y1cv3gu+Ui+3gN+H4ge0mXfHeT43bNWElBXqAXdcT8K+oWbBbeiOxF/D5PqqDG87txDGf/bJFP1+wA9hJIMY/RjHeHE4xcywVMQdTUdRUcx5+tk9YNX2XVTPQB0rtBg30KYCXedxopBXt4jUt4iJypqhpx23UV6m7QIN6oTtBLykwd8BWe/j5ZY7jedbT76LvnGF2A1zjxPsY8+KOnQCOa6FnGLktQQ8J+BrZbQp7JZDLyScTZLMyNwz4dO3YhT8nzzXIlHqACenHRJviDmHzBPmxOWS3IgYplEMhh7gxqMc53hiknoMtenrpfuJB9DnFeedC8mNTP3F8wvUP4OQ3M6uaPM8dfQO0NNfWC/VPU20g6CGWyTgg6WghcvHnzISfJ27jvwrglE802gd6TMzK6ug1wV/E2RMhudJv06XGffx7HGPRf5CYhfc6qYZVr2/HI3jnazIuag728bBTq8A6Na4fg88za8A0AXt9iGj0wA/V0RLrPAifn2ARPL8L/qML/8kCs2+va7H3NwiHoVaiPYvzE7TnAeTsAGa6i85hZQ38o6hHL07KpxTiC38udnrDl/OWffbwGK8Vh+qPK4OpqjlS/wtlWEetjfNNUB7tLsOndhp5I8k/5w9wXMHrlfwo5bjQPgJk8Az1ERw7Q54ReQO+iPWombfjkWOMfU/c68j6c7Ab2KBCesKaNdSfFZIj+CE50n7b+xFY//+0nnqKoIF+u74bem/HeA90sCT0TjUtciPNUdOG8x15fbtPQFaeLN8Qstzls1X0m49ClhnYag744XCJqS8VmTltMNMyIuok9X3RS3Z79YTJgjkf+y7w2Cj1Cfw1x+eUozP2VtAHIs8Fe/rI37zXST39CvqU2mcRj55BTH4WuR05qVlPn3012KesrCO//yVo0D3U0wJ/BPuU4GNQ4kh5T8Z5p/6I7HOszOH84g4spKd/jLW8IO8z3DutkHcmRc1sixo4v0o9feQrRQF9yqeyp19x++sN57vsw7oOj24fH2dbataLwd5forWPpb874fXxK7z3Hd7Hjxzy+vgM/d0V3IUEaG407+Pb6Lsre7AH+lZhffyIKbEh5TbCx8C/CuFmwsd0L5lCjkp5fXz4wgdsN39OcgKe5t+bXci7JcLHS+qtorTvXU6s8cUK1DXjsO9J2HcG9o2YgVigEM6gupx6AMZwSuS74W7R3xK5V/Qmyd+H7AGRP2d5Den4XWPM5rmjofdINZeVRu5Ia4iNPLahzmr0x4g/d1xzc8c0+LVIXzxXC/8bsql/BF46yW4ol8NueA2SoDthc9K+yxy3Pw4sthPvbrq5g/I4zdO8PqS+E3+OeoTXM0o6VlXSHawz3cprE5I95BzdOzbKekYB0vfN6OoE8AqwlnNXp6RndGAHhdeVqGGA/XZxHUKfRA98IY4VdwOX3QNbasdaqu2AYzjGpFowwesdwiRTHdBnmeRzTb1VkvKJOPr01zvbsHIYXkTsNkPw4pLo0QIvWrDRmr4HfAF7pe7z8CJiXwAvss800sJ9UAw0NkFDBY29oEE9Cth7UxrTARpp2PakjRin7wONB0BjP+lF+Az1egM0eJxpwK24V0oB8+qQMbunGW6FPL7eHLdCnoFcvc0eN0P6UQnRY+X4Y53H7HSnLuyR1wUGn1NdYMEeJ2GPGXsn1bVKNqZ3jnWWj49KGxuFjR2c1XsmyMYWmPoibGwc9kn3bGPPMSW9IPoaafgpxYJaCWctwp6UdthQH/eFLLfvZT5HL5XvjTgh+1+bXv8rzJ789Yd7vhNOHhJn6icfo5oUPoaeimXvwJna4GNx3tsb7mSdY9lmZ9LpTArqbGAk4hN3zCXc/RR5vQG65JfOGYpNzoDawu3hBfCU4B+8Uz2KPRrqxrCe3dad8Wnrk2Sv7bDX4wbi+2BKRx9OxHfYKOL7JyAj3D2SrTbi1pjoU7t9eNhImsdX6JD3LDdhf7i376X4fg/V/YjvcTxfbELvArdd3tuCjIgWzTNrtIdLi4/ZfqcW27pTbfKn19pt/rgj+m2Hse4l6n/Z/HcbDXmR/27Hvb8dVnB/jPlBeZdrIecUKXft4PlV1uCPwzeiwftjWxF9IfTD6HcOWcgxZ18DnkHfP4WYoT+AvFAWd8nBPA48uR68S7a3xG8myG8rGmh1gVY3fKkHtJea3yWzR0PvkjP2FcSu+2DLiIPKXtCYE3fJQRrg5+dBjGbbWId7LA2xmCVAD7+JCsNoLWf8fQcevw5T/Fqm+IV8uij11haWL7xa2IKPAM/y36sAo/p08GnogOaNOsD9Pf+diugdFRBjKM/yOw/ov8k9PjDlnhDZ172YWUHM1h6C7B/G+bvoju0Osue/H2qQfY/kjXCBwxvhT4e3pNBDKG/PhPBGMdyJ53S/xHMaeNsHWtBJU95ErezjzTIVZpn4XYZJtTLhM8jfxWdu7GpyfxCaX8j+eX5x+fjl9podZ/qey4dTs+N8Vh64K0988BiKfv5HugdpWpPmEA+njx55dWH+2PTC0Xn+C8Prp363/J3vv1Wbjvzf8vJ/F976x5GpX0x95Z23D/342Z/cfjNdEb9DbP53ZOpvZml8aXbBonnm6JGF+anpBW3qlfnZqZkvaoeOHFo4NPXKoS/NztB7UzMzfGN6f3721aOvHJ/ln49+4Qif0HNnTn+35d//8j8W/Wb3D576+nOPf0c8ZWxw6sjUS7PzWr5fO3J0QXt1duFxH3fJPjE+UpJjUow9ZTlqYnwYmY/+HkyIUVsW4375/QNVMd5/RY7y8z5Il3+25XhKjMoFMd79TTl+TYy7PvMHWR1yDeApAAA=',
);

export class ResolverFactory extends ContractFactory {
  static readonly bytecode = bytecode;

  constructor(accountOrProvider: Account | Provider) {
    super(bytecode, Resolver.abi, accountOrProvider);
  }

  override deploy<TContract extends Contract = Contract>(
    deployOptions?: DeployContractOptions,
  ): Promise<DeployContractResult<TContract>> {
    return super.deploy({
      storageSlots: Resolver.storageSlots,
      ...deployOptions,
    });
  }

  static async deploy(
    wallet: Account,
    options: DeployContractOptions = {},
  ): Promise<DeployContractResult<Resolver>> {
    const factory = new ResolverFactory(wallet);
    return factory.deploy(options);
  }
}
