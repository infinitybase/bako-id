/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.100.1
  Forc version: 0.66.4
  Fuel-Core version: 0.40.0
*/

import {
  Account,
  BigNumberish,
  BN,
  Bytes,
  decompressBytecode,
  Script as __Script,
  StdString,
} from 'fuels';

import type { Enum } from "./common";

export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum UploaderValidatorScriptErrorInput { ContractAddressNotSet = 'ContractAddressNotSet', FileHashNotSet = 'FileHashNotSet', HandleNotSet = 'HandleNotSet', HandleNotFound = 'HandleNotFound', NotOwner = 'NotOwner' };
export enum UploaderValidatorScriptErrorOutput { ContractAddressNotSet = 'ContractAddressNotSet', FileHashNotSet = 'FileHashNotSet', HandleNotSet = 'HandleNotSet', HandleNotFound = 'HandleNotFound', NotOwner = 'NotOwner' };

export type AddressInput = { bits: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { bits: string };
export type ContractIdOutput = ContractIdInput;
export type UploadEventInput = { file_hash: string, handle: StdString, sender: AddressInput, owner: IdentityInput };
export type UploadEventOutput = { file_hash: string, handle: StdString, sender: AddressOutput, owner: IdentityOutput };

export type UploaderValidatorScriptInputs = [file_hash: string, handle: StdString, base_url: StdString];
export type UploaderValidatorScriptOutput = void;

export type UploaderValidatorScriptConfigurables = Partial<{
  MANAGER_ADDRESS: string;
  REGISTRY_ADDRESS: string;
}>;

const abi = {
  "programType": "script",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "b256",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
    },
    {
      "type": "enum UploaderValidatorScriptError",
      "concreteTypeId": "0a95f74ac7c063121ba5f145815e80708cbbb222e8f7c34db659efc96eb485e0",
      "metadataTypeId": 0
    },
    {
      "type": "struct UploadEvent",
      "concreteTypeId": "e614f88df0e3255f37570e7d1520b544cd220a3ffc289e67d901e06c18197051",
      "metadataTypeId": 3
    },
    {
      "type": "struct std::string::String",
      "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c",
      "metadataTypeId": 8
    }
  ],
  "metadataTypes": [
    {
      "type": "enum UploaderValidatorScriptError",
      "metadataTypeId": 0,
      "components": [
        {
          "name": "ContractAddressNotSet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "FileHashNotSet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "HandleNotSet",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "HandleNotFound",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        },
        {
          "name": "NotOwner",
          "typeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
        }
      ]
    },
    {
      "type": "enum std::identity::Identity",
      "metadataTypeId": 1,
      "components": [
        {
          "name": "Address",
          "typeId": 4
        },
        {
          "name": "ContractId",
          "typeId": 7
        }
      ]
    },
    {
      "type": "raw untyped ptr",
      "metadataTypeId": 2
    },
    {
      "type": "struct UploadEvent",
      "metadataTypeId": 3,
      "components": [
        {
          "name": "file_hash",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "handle",
          "typeId": 8
        },
        {
          "name": "sender",
          "typeId": 4
        },
        {
          "name": "owner",
          "typeId": 1
        }
      ]
    },
    {
      "type": "struct std::address::Address",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::bytes::Bytes",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "buf",
          "typeId": 6
        },
        {
          "name": "len",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::bytes::RawBytes",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "ptr",
          "typeId": 2
        },
        {
          "name": "cap",
          "typeId": 9
        }
      ]
    },
    {
      "type": "struct std::contract_id::ContractId",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "bits",
          "typeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        }
      ]
    },
    {
      "type": "struct std::string::String",
      "metadataTypeId": 8,
      "components": [
        {
          "name": "bytes",
          "typeId": 5
        }
      ]
    },
    {
      "type": "u64",
      "metadataTypeId": 9
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "file_hash",
          "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b"
        },
        {
          "name": "handle",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        },
        {
          "name": "base_url",
          "concreteTypeId": "9a7f1d3e963c10e0a4ea70a8e20a4813d1dc5682e28f74cb102ae50d32f7f98c"
        }
      ],
      "name": "main",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": null
    }
  ],
  "loggedTypes": [
    {
      "logId": "762787612460081938",
      "concreteTypeId": "0a95f74ac7c063121ba5f145815e80708cbbb222e8f7c34db659efc96eb485e0"
    },
    {
      "logId": "16579149416773133663",
      "concreteTypeId": "e614f88df0e3255f37570e7d1520b544cd220a3ffc289e67d901e06c18197051"
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "MANAGER_ADDRESS",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 12888
    },
    {
      "name": "REGISTRY_ADDRESS",
      "concreteTypeId": "7c5ee1cecf5f8eacd1284feb5f0bf2bdea533a51e2f0c9aabe9236d335989f3b",
      "offset": 12920
    }
  ]
};

const bytecode = decompressBytecode('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');

export class UploaderValidatorScript extends __Script<UploaderValidatorScriptInputs, UploaderValidatorScriptOutput> {

  static readonly abi = abi;
  static readonly bytecode = bytecode;

  constructor(wallet: Account) {
    super(bytecode, abi, wallet);
  }
}
